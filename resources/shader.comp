#version 430
#extension GL_ARB_shader_storage_buffer_object : require

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct SimData
{
	vec3 pos;
	float padding1;
	vec3 vel;
	float acc;
};

struct VertData
{
	vec3 pos;
	float padding1;
	vec3 colour;
	float padding2;
};

layout(std430, binding=2) buffer VertexBuffer
{
	VertData verts[][8];
};

layout(std430, binding=3) buffer SimBuffer
{
	SimData dots[];
};

uniform int state;
uniform int count;

float r = 1.0/256.0;
float g = 1.0/1000000.0;

uint get_id()
{
	return gl_GlobalInvocationID.x;
}

void update_in()
{
	uint id = get_id();

	SimData dots_c = dots[id];
	dots_c.pos += dots_c.vel;
	dots[id] = dots_c;

	float len = length(dots_c.vel) * 16;
	float m = 1.0 / (-len - 1) + 1;

	vec3 colour = vec3(m, 1 - m, 0);
	
	verts[id][0].pos = dots_c.pos + vec3( r,  r,  r);
	verts[id][1].pos = dots_c.pos + vec3( r,  r, -r);
	verts[id][2].pos = dots_c.pos + vec3( r, -r,  r);
	verts[id][3].pos = dots_c.pos + vec3( r, -r, -r);
	verts[id][4].pos = dots_c.pos + vec3(-r,  r,  r);
	verts[id][5].pos = dots_c.pos + vec3(-r,  r, -r);
	verts[id][6].pos = dots_c.pos + vec3(-r, -r,  r);
	verts[id][7].pos = dots_c.pos + vec3(-r, -r, -r);

	for(int i = 0; i < 8; i++)
	{
		verts[id][i].colour = colour;
	}
}

void update_out()
{
	uint id = get_id();

	SimData dots_c = dots[id];
	vec3 change = vec3(0);
	
	for(int i = 0; i < count; i++)
	{
		vec3 diff = dots[i].pos - dots_c.pos;
		float v_dot = dot(diff, diff);
		change += v_dot > 0 ? (diff / v_dot * g) : vec3(0, 0, 0);
	}

//	dots_c.acc = length(change);
	dots_c.vel += change;
	dots[id] = dots_c;
}

void main()
{
	switch(state)
	{
	case 0:
		update_in();
		break;
	case 1:
		update_out();
		break;
	}
}

